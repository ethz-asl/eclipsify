#!/usr/bin/env python

import catkin.workspace
import os
from eclipsify_lib.package_tools import *
from eclipsify_lib.tools import colored, verbose, error, okay, setVerbose
from eclipsify_lib.eclipsify_gen_project import main, addCommonArguments

if not os.environ.has_key('COLUMNS'):
    try:
        rows, columns = os.popen('stty size', 'r').read().split()
        os.environ['COLUMNS'] = str(columns)
    except:
        pass

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import subprocess

def check_ps_cmd(script_name):
    for proc in psutil.process_iter():
        if proc == script_name:
            return True
    return False

defaultOutputDir = "{devel}/share/{package}/eclipse"

usage="""
This utility creates a new eclipse project. It assumes the package is
in a workspace with the default names for the devel/build/src spaces.
If your workspace is different, try eclipsify-gen-project. If the
command is called with the optional -w option, pointing to an existing
eclipse workspace, the project is added to the eclipse workspace. You 
must not have this workspace open in eclipse when you use -w. 
Unfortunately this can be slow; see below.

The project files will go to %s/ unless -s or -O are used.""" % defaultOutputDir

parser = ArgumentParser(description=usage, formatter_class=ArgumentDefaultsHelpFormatter)
addCommonArguments(parser)

outputInSourceOutputDir = '{src}'

parser.add_argument('-w', dest='eclipse_workspace', help="""The path to the eclipse workspace that this package should be added to.
WARNING: This is going to be very slow in some situations 
(see 'https://github.com/ethz-asl/eclipsify/issues/8' for more information). 
As an alternative consider "File -> Import -> Existing Projects into Workspace" from within eclipse. There you can even import multiple projects at once.""")
parser.add_argument('-s', dest='outputInSource', action='count', default=False, help='Will enforce in source writing of the project files. Equivalent to "-O \'%s\' -D IN_SOURCE=1". An additionally provided "-O" will take precedence.' % outputInSourceOutputDir)
parser.add_argument('-O', dest='projectOutputDir', default=defaultOutputDir, help='The path to the folder in which the eclipse project files should be created. The substrings {devel}, {package} and {src} will be replaced appropriately.')
parser.add_argument('-W,--catkin-ws', dest='catkin_workspace', help='The path to the catkin workspace that this package should be. It must point to the workspace\'s devel space! Default is to use the current catkin workspace layers ("sourced").')
parser.add_argument("packages", nargs="+", help="The names of the catkin packages to be eclipsified.")

options = parser.parse_args()

setVerbose(options.verbose)

if options.eclipse_workspace:
    import psutil

packages = [ package.strip('/') for package in options.packages ]
del options.packages

useRelativeLocations = os.environ.has_key('ECLIPSIFY_USE_RELATIVE_LOCATIONS_FOR_TESTING');

print "-- Searching workspaces:"
if options.catkin_workspace:
    import os.path;
    catkin_workspaces = [options.catkin_workspace];
    if not useRelativeLocations:
        catkin_workspaces = [os.path.abspath(ws) for ws in catkin_workspaces]; 
else:
    catkin_workspaces = catkin.workspace.get_workspaces()
    

if len(catkin_workspaces) == 0:
    error('No workspaces! Please source the setup.bash file of some workspace before running this script.');
    exit(-1)

okay("--> Found %s" % (", ".join(catkin_workspaces)))

errors = []
for package in packages:
  print "\n*************** Searching for package %s ***********************" % (package);
  src = None
  workspace = None

  # Initialize with a good guess. This helps find 
  # pure cmake packages that are not found by the method below.
  workspace = Workspace(catkin_workspaces[0])
  src = os.path.join(workspace.getSourceFolder(), package)

  if foundCatkinPkg:
      pkgCollector = PackageCollector(package)
      for ws in catkin_workspaces:
          verbose("Searching workspace '%s'." % ws);
          for s in catkin.workspace.get_source_paths(ws): # this can yield actual workspace source paths or packages depending on the catkin methods used
              
              if isPackageSrc(s): 
                  pkgCollector.processPackage(s, ws)
              else:
                  verbose("Digging into source path '%s'." % s);
                  for p in find_packages(s):
                      pkgCollector.processPackage(os.path.join(s, p), ws)
      
      if pkgCollector.src:
          src = pkgCollector.src
          workspace = pkgCollector.workspace
  
  if not src or not isPackageSrc(src) :
      error('-- Could not find package {0}. Aborting.'.format(package))
      errors.append(1)
      continue
      
  okay("--> Found {0}\n".format(src))
  
  if options.outputInSource :
      verbose("In source output is active. Overwriting output directory with '%s'." % outputInSourceOutputDir);
      if options.projectOutputDir == defaultOutputDir:
          options.projectOutputDir = outputInSourceOutputDir
      else:
          verbose("Output directory already set to %s" %options.projectOutputDir)
      options.define.append('IN_SOURCE=1');
  
  eclipse_project_output_dir = options.projectOutputDir.format(devel = workspace.getDevelSpace(), package = package, src = src).replace('/', os.path.sep)
  
  if not os.path.exists(eclipse_project_output_dir):
      import eclipsify_lib.tools
      eclipsify_lib.tools.mkdir_p( eclipse_project_output_dir )
  
  options.srcDir = (src,)
  options.outDir = (eclipse_project_output_dir,)
  options.buildDir = (os.path.join(workspace.getBuildSpace(), package), )
  options.package = [package]

  result = main(options);
  if result != 0:
    errors.append(result)
  
  # Add the package to a workspace if necessary.
  elif options.eclipse_workspace:
      workspace = os.path.abspath(options.eclipse_workspace)
      print "-- Trying to add the package to the eclipse workspace at: {0}".format(workspace)
      print "-- Checking if eclipse is running"
      if check_ps_cmd('eclipse'):
          error('-- ERROR: Unable to add a package to a workspace if eclipse is running')
          errors.append(2)
          continue
      if not os.path.exists(workspace):
          error("-- ERROR: The workspace path does not exist")
          errors.append(2)
          continue
      cmd = 'eclipse -nosplash -data {0} -application org.eclipse.cdt.managedbuilder.core.headlessbuild -import {1}'.format(workspace, eclipse_project_output_dir)
      print cmd
      status = subprocess.call(cmd, shell=True)
      if status != 0:
          error('-- ERROR Eclipse returned an error. This may not have worked.');
          errors.append(2)
          continue
      okay('-- Successfully added {0} to the workspace at {1}'.format(package, workspace))

if errors:
  exit(max(errors))
